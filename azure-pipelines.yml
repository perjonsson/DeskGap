trigger:
  - master

pr:
  - master

stages:
- stage: 'BuildAndTest'
  displayName: 'Build & Test'
  jobs:
  - job: Build
    strategy:
      matrix:
        linux-x64:
          imageName: 'ubuntu-16.04'
          deskGapPlatform: 'linux-x64'
        win32-ia32:
          imageName: 'windows-2019'
          deskGapPlatform: 'win32-ia32'
        darwin-x64:
          imageName: 'macos-10.14'
          deskGapPlatform: 'darwin-x64'
    pool:
      vmImage: $(imageName)

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '12.x'

    - bash: |
        set -e
        wget https://github.com/Kitware/CMake/releases/download/v3.15.5/cmake-3.15.5-Linux-x86_64.tar.gz
        tar -xvf cmake-3.15.5-Linux-x86_64.tar.gz > /dev/null
        export PATH=$PWD/cmake-3.15.5-Linux-x86_64/bin:$PATH
        echo "##vso[task.setvariable variable=PATH]$PATH"
      condition: eq( variables['Agent.OS'], 'Linux' )
      displayName: 'Install the up-to-date version of CMake on Linux'

    - bash: |
        set -e
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test > /dev/null
        sudo apt-get update -y  > /dev/null
        sudo apt-get install -y g++-8
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 60 --slave /usr/bin/g++ g++ /usr/bin/g++-8
        sudo update-alternatives --config gcc
      condition: eq( variables['Agent.OS'], 'Linux' )
      displayName: 'Install gcc-8 and g++-8 on Linux'

    - bash: sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev
      condition: eq( variables['Agent.OS'], 'Linux' )
      displayName: 'Install dev files of gtk and webkit on Linux'

    - bash: brew install cmake
      condition: eq( variables['Agent.OS'], 'Darwin' )
      displayName: 'Install the up-to-date version of CMake on macOS'

    - script: npm ci
      displayName: 'npm ci'

    - bash: bash node/scripts/build.sh
      displayName: 'Build'

    - task: ArchiveFiles@2
      displayName: 'Tar binary'
      inputs:
        rootFolderOrFile: $(System.DefaultWorkingDirectory)/dist_build/dist
        includeRootFolder: false
        archiveType: tar
        tarCompression: none
        archiveFile: $(Pipeline.Workspace)/dist.tar

    - publish: $(Pipeline.Workspace)/dist.tar
      artifact: $(deskGapPlatform)

  - job: PrepareNPM
    dependsOn: Build
    displayName: 'Prepare npm Package'
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '12.x'
      - download: current
      - bash: |
          set -e
          mkdir dists
          for distTarPath in $(find $(Pipeline.Workspace) -type f -path '*/dist.tar'); do
            platformName=$(basename $(dirname $distTarPath))
            mkdir dists/$platformName
            tar -xf $distTarPath -C dists/$platformName
          done
        displayName: 'Untar binaries'

      - bash: npm ci
      - bash: bash node/scripts/prepare-npm.sh dists
      - publish: $(System.DefaultWorkingDirectory)/npm.tgz
        artifact: npmTarball
      - publish: $(System.DefaultWorkingDirectory)/dist_zips
        artifact: distZips

  - job: Test
    dependsOn: Build
    strategy:
      matrix:
        win2019:
          imageName: 'windows-2019'
          deskGapPlatform: 'win32-ia32'
        win2016:
          imageName: 'vs2017-win2016'
          deskGapPlatform: 'win32-ia32'
        win2012r2:
          imageName: 'vs2015-win2012r2'
          deskGapPlatform: 'win32-ia32'
        mac:
          imageName: 'macos-10.14'
          deskGapPlatform: 'darwin-x64'
        linux:
          imageName: 'ubuntu-16.04'
          deskGapPlatform: 'linux-x64'
    pool:
      vmImage: $(imageName)
    steps:
    - download: current
      artifact: $(deskGapPlatform)

    - task: ExtractFiles@1
      inputs:
        archiveFilePatterns: "$(Pipeline.Workspace)/$(deskGapPlatform)/dist.tar"
        destinationFolder: $(System.DefaultWorkingDirectory)/dists
    - bash: ls dists


    - task: NodeTool@0
      inputs:
        versionSpec: '12.x'

    - script: npm ci
      displayName: 'npm ci'

    - bash: |
        set -e
        /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
      displayName: 'Start xvfb'
      condition: eq(variables['Agent.OS'], 'Linux')

    - bash: sudo apt-get install -y libwebkit2gtk-4.0-37 > /dev/null
      displayName: 'Install webkit2gtk'
      condition: eq(variables['Agent.OS'], 'Linux')


    - bash: node node/test/start.js "$(System.DefaultWorkingDirectory)/dists"
      displayName: 'Test'
      env:
        DISPLAY: ':99.0'

  - job: TestNPM
    displayName: 'Test npm Package'
    dependsOn: PrepareNPM
    strategy:
      matrix:
        win:
          imageName: 'windows-2019'
          deskGapPlatform: 'win32-ia32'
        mac:
          imageName: 'macos-10.14'
          deskGapPlatform: 'darwin-x64'
        linux:
          imageName: 'ubuntu-16.04'
          deskGapPlatform: 'linux-x64'
    pool:
      vmImage: $(imageName)
    steps:
      - bash: sudo apt-get install -y libwebkit2gtk-4.0-37 > /dev/null
        displayName: 'Install webkit2gtk'
        condition: eq(variables['Agent.OS'], 'Linux')
      - task: NodeTool@0
        inputs:
          versionSpec: '12.x'
      - download: current
        artifact: npmTarball
      - download: current
        artifact: distZips
      - bash: |
          set -e
          /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          sleep 6
        displayName: 'Start xvfb'
        condition: eq(variables['Agent.OS'], 'Linux')

      - task: CopyFiles@2
        inputs:
          sourceFolder: "$(Pipeline.Workspace)/npmTarball"
          contents: "npm.tgz"
          targetFolder: "$(System.DefaultWorkingDirectory)"

      - task: Bash@3
        inputs:
          filePath: $(Build.SourcesDirectory)/node/scripts/test-npm.sh
        env:
          DISPLAY: ':99.0'
          DESKGAP_DIST_FOLDER: $(Pipeline.Workspace)/distZips
          DESKGAP_NPM_TEST_INSTALL_WHAT: ../npm.tgz
          DESKGAP_NPM_TEST_VERSION_FILE: $(Build.SourcesDirectory)/node/VERSION

- stage: Release
  dependsOn: BuildAndTest
  condition: and(succeeded(), eq(variables['DESKGAP_AP_RELEASE'], '1'))
  jobs:
  - job: Publish
    pool:
      vmImage: 'Ubuntu-18.04'
    steps:
    - download: current
      artifact: npmTarball
    - download: current
      artifact: distZips

    - bash: |
        deskgapVersion=$(<$(Build.SourcesDirectory)/node/VERSION)
        echo "##vso[task.setvariable variable=DESKGAP_VERSION]$deskgapVersion"
    - task: GitHubRelease@0
      inputs:
        gitHubConnection: 'perjonsson'
        action: 'create'
        repositoryName: '$(Build.Repository.Name)'
        target: '$(Build.SourceVersion)'
        tagSource: 'manual'
        tag: 'v$(DESKGAP_VERSION)'
        assets: |
          $(Pipeline.Workspace)/distZips/*
          $(Pipeline.Workspace)/npmTarball/*
        isDraft: false
        addChangeLog: false
        releaseNotesSource: 'file'
        isPreRelease: ne(variables['DESKGAP_AP_NPM_TAG'], 'latest')
        releaseNotesFile: $(Build.SourcesDirectory)/node/WHATS_NEW.md

    - task: Bash@3
      displayName: "Publish to Binary and npm"
      inputs:
        filePath: $(Build.SourcesDirectory)/node/scripts/publish-release.sh
      env:
        DESKGAP_DISTS_DIR: $(Pipeline.Workspace)/distZips
        DESKGAP_NPM_TARBALL: $(Pipeline.Workspace)/npmTarball/npm.tgz
        NPM_TOKEN: $(NPM_TOKEN)
        DESKGAP_BINTRAY_USER: $(DESKGAP_BINTRAY_USER)
        DESKGAP_BINTRAY_KEY: $(DESKGAP_BINTRAY_KEY)

    - bash: |
        set -e
        /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
      displayName: 'Start xvfb'

    - bash: sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev
      condition: eq( variables['Agent.OS'], 'Linux' )
      displayName: 'Install dev files of gtk and webkit on Linux'

    - task: Bash@3
      displayName: "Final Test After Release"
      inputs:
        filePath: $(Build.SourcesDirectory)/node/scripts/test-npm.sh
      env:
        DISPLAY: ':99.0'
        DESKGAP_NPM_TEST_INSTALL_WHAT: deskgap@$(DESKGAP_AP_NPM_TAG)
        DESKGAP_NPM_TEST_VERSION_FILE: $(Build.SourcesDirectory)/node/VERSION
